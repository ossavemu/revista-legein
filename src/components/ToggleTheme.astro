---
import { Sun, Moon } from '@/components/icons/index.astro'
import { BgClassesArray } from '@/lib/theme/constants'
const { light, patternLight, dark, patternDark } = BgClassesArray
---

<div
  title="Toggles light & dark"
  id="theme-toggle"
  class="p-3 sm:p-1 cursor-pointer"
  transition:persist
>
  <Sun /><Moon />

  <script define:vars={{ light, patternLight, dark, patternDark }} is:inline>
    class ThemeManager {
      constructor() {
        this.matchMedia = window.matchMedia('(prefers-color-scheme: dark)')

        this.removeMediaListener = null

        this.moon = document.getElementById('moon')

        this.sun = document.getElementById('sun')

        this.bg = document.getElementById('bg')

        this.pattern = document.getElementById('pattern')

        this.eventStorage = new Event('storage')

        this.#bindEvents()
      }

      #bindEvents() {
        this.#updateTheme()
        this.#onStorageChange()
        this.#onTransitionPage()
      }

      #onTransitionPage() {
        document.addEventListener('astro:after-swap', () => {
          this.#updateTheme()
        })
      }

      #onStorageChange() {
        document.addEventListener('storage', () => {
          this.#updateTheme()
        })
      }

      #updateTheme() {
        if (this.removeMediaListener) {
          this.removeMediaListener()
        }

        this.matchMedia.addEventListener('change', () => {
          this.#updateTheme()
        })

        this.removeMediaListener = () => {
          this.matchMedia.removeEventListener('change', () => {
            this.#updateTheme()
          })
        }

        this.#setTheme(this.getThemePreference() === 'dark')
      }

      getThemePreference() {
        const localItem =
          typeof localStorage !== 'undefined' && localStorage.getItem('theme')

        if (localItem) return localItem

        return window.matchMedia('(prefers-color-scheme: dark)').matches
          ? 'dark'
          : 'light'
      }

      #setTheme(isDark) {
        this.#setBackground(isDark)
        this.#setThemeIcon(isDark)
        document.documentElement.classList.toggle('dark', isDark)
      }

      #setBackground(isDark) {
        this.#toggleClasses(this.bg, isDark, dark)
        this.#toggleClasses(this.bg, !isDark, light)

        this.#toggleClasses(this.pattern, isDark, patternDark)
        this.#toggleClasses(this.pattern, !isDark, patternLight)
      }

      #setThemeIcon(isDark) {
        if (!this.moon || !this.sun) return

        this.moon.classList.toggle('hidden', isDark)
        this.sun.classList.toggle('hidden', !isDark)

        this.#setThemeIconClick(isDark)
      }

      #handleThemeIconClick = (theme) => {
        localStorage.setItem('theme', theme)
        document.dispatchEvent(this.eventStorage)
      }

      #setThemeIconClick(isDark) {
        this.moon.addEventListener(
          'click',
          this.#handleThemeIconClick.bind(null, 'dark')
        )
        this.sun.addEventListener(
          'click',
          this.#handleThemeIconClick.bind(null, 'light')
        )
      }

      #toggleClasses(el, condition, classNames) {
        if (!el) return

        classNames.forEach((c) => {
          el.classList.toggle(c, condition)
        })
      }
    }

    new ThemeManager()
  </script>
</div>
